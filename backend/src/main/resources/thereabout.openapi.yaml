openapi: "3.0.2"
info:
  title: Frontend REST API
  version: "1.0"
paths:
  /backend/api/v1/location/sparse:
    get:
      summary: Get all sparse location history entries for the given date range. If no date range is provided, all entries are returned.
      tags:
        - location
      operationId: getSparseLocations
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
            example: "2012-01-31"
          required: false
          description: the start of the date range, if no date is provided -infinity is assumed
        - in: query
          name: to
          schema:
            type: string
            format: date
            example: "2012-01-31"
          required: false
          description: the end of the date range, if no date is provided +infinity is assumed
      responses:
        200:
          description: Successful response containing a json object with all location history entries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SparseLocationHistoryResponse"
        500:
          $ref: '#/components/responses/500'
  /backend/api/v1/location:
    get:
      summary: Get all location history entries for the given date range. If no date range is provided, all entries are returned.
      tags:
        - location
      operationId: getLocations
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date
            example: "2012-01-31"
          required: false
          description: the start of the date range, if no date is provided -infinity is assumed
        - in: query
          name: to
          schema:
            type: string
            format: date
            example: "2012-01-31"
          required: false
          description: the end of the date range, if no date is provided +infinity is assumed
      responses:
        200:
          description: Successful response containing a json object with all location history entries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationHistoryResponse"
        500:
          $ref: '#/components/responses/500'
    post:
      summary: Add a new location history entry.
      tags:
        - location
      operationId: addLocation
      requestBody:
        description: location history entry to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationHistoryEntry"
      responses:
        200:
          description: Successful response containing the newly created location history entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationHistoryEntry"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a list of location entries.
      tags:
        - location
      operationId: deleteLocations
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: number
              example: 42
            example: [42, 43]
          required: true
          description: the ids of the location history entries to be deleted
      responses:
        204:
          description: The location history entry was successfully deleted
        500:
          $ref: '#/components/responses/500'
  /backend/api/v1/location/geojson:
    post:
      summary: Post GeoJson location data
      tags:
        - location
      description: Endpoint for posting geojson location data, e.g. from a client such as Overland
      operationId: addGeoJsonLocation
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locations:
                  type: array
                  items:
                    $ref: '#/components/schemas/GeoJsonLocation'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "ok"
        500:
          $ref: '#/components/responses/500'

  /backend/api/v1/location/{id}:
    put:
      summary: Update a specific location history entry.
      tags:
        - location
      operationId: updateLocation
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 42
          required: true
          description: the id of the location history entry to be updated
      requestBody:
        description: location history entry to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationHistoryEntry"
      responses:
        200:
          description: Successful response containing the updated location history entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationHistoryEntry"
        500:
          $ref: '#/components/responses/500'

  /backend/api/v1/config:
    get:
      summary: Get the frontend configuration.
      tags:
        - frontend
      operationId: getFrontendConfiguration
      responses:
        200:
          description: Successful response containing the frontend configuration, e.g. Google Maps API Key etc.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontendConfigurationResponse"
        500:
          $ref: '#/components/responses/500'
  /backend/api/v1/config/import-file:
    get:
      summary: The status of the file import process.
      tags:
        - frontend
      operationId: fileImportStatus
      responses:
        200:
          description: Successful response containing the status of the file import process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileImportStatus'
        500:
          $ref: '#/components/responses/500'
    post:
      summary: Import location data from a file.
      tags:
        - frontend
      operationId: importFromFile
      requestBody:
          description: The file to import
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
      responses:
        204:
          description: The file is successfully being imported.
        500:
          $ref: '#/components/responses/500'

  /backend/api/v1/statistics:
    get:
      summary: Statistics about the user's location history.
      tags:
        - statistics
      operationId: getStatistics
      responses:
        200:
          description: Successful response containing the users statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistics'
        500:
          $ref: '#/components/responses/500'

  /backend/api/v1/trip:
    get:
      summary: A list of all the trips the user has taken.
      tags:
        - trip
      operationId: getTrips
      responses:
        200:
          description: Successful response containing the users trips.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trip'
                x-field-extra-annotation: "@lombok.Builder.Default"
        500:
          $ref: '#/components/responses/500'
    post:
      summary: Add a new trip.
      tags:
        - trip
      operationId: addTrip
      requestBody:
        description: the trip to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trip"
      responses:
        200:
          description: Successful response containing the newly created trip
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Trip"
        500:
          $ref: '#/components/responses/500'
  /backend/api/v1/trip/{id}:
    put:
      summary: Update a specific trip.
      tags:
        - trip
      operationId: updateTrip
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 42
          description: the id of the trip to be updated
          required: true
      requestBody:
        description: the trip to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trip"
      responses:
        200:
          description: Successful response containing the updated trip
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/Trip"
        500:
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a specific trip.
      tags:
        - trip
      operationId: deleteTrip
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 42
          description: the id of the trip to be deleted
          required: true
      responses:
        204:
          description: The trip was successfully deleted
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    Trip:
      description: A trip the user has taken.
      type: object
      required:
          - id
          - start
          - end
          - description
          - title
      properties:
        id:
          type: number
          description: The unique identifier of the trip
          example: 42
        start:
          type: string
          format: date
          example: "2012-01-15"
          description: The start of the trip
        end:
          type: string
          format: date
          example: "2012-01-31"
          description: The end of the trip
        visitedCountries:
          type: array
          items:
            type: object
            description: The countries visited during the trip
            properties:
              countryIsoCode:
                type: string
                example: "CH"
                description: The ISO 3166-1 alpha-2 country code
              countryName:
                type: string
                example: "Switzerland"
                description: The full english name of the country
        description:
          type: string
          example: "A trip to the mountains"
          description: A description of the trip
        title:
          type: string
          example: "Mountain trip"
          description: The title of the trip

    UserStatistics:
      description: The status of the file import process.
      type: object
      required:
        - visitedCountries
      properties:
        visitedCountries:
          type: array
          items:
            $ref: "#/components/schemas/CountryStatistic"
          x-field-extra-annotation: "@lombok.Builder.Default"
    CountryStatistic:
      type: object
      required:
        - countryIsoCode
        - countryName
        - continent
        - firstVisit
        - lastVisit
        - numberOfDaysSpent
      properties:
        countryIsoCode:
          type: string
          example: "CH"
          description: The ISO 3166-1 alpha-2 country code
        countryName:
          type: string
          example: "Switzerland"
          description: The full english name of the country
        continent:
          type: string
          example: "EU"
          description: The continent the country is located in
        firstVisit:
          type: string
          format: date
          example: "2012-01-31"
          description: The first time the country was visited by the user
        lastVisit:
          type: string
          format: date
          example: "2012-01-31"
          description: The last time the country was visited by the user
        numberOfDaysSpent:
          type: number
          description: The number of days spent in the country

    FileImportStatus:
      description: The status of the file import process.
      type: object
      required:
        - status
        - progress
      properties:
        status:
          type: string
          example: "IN_PROGRESS"
          enum:
            - IN_PROGRESS
            - IDLE
        progress:
          type: number
          example: 60
          description: The progress of the file import process from 0 to 100.
    SparseLocationHistoryResponse:
      type: array
      items:
        $ref: "#/components/schemas/SparseLocationHistoryEntry"
      x-field-extra-annotation: "@lombok.Builder.Default"
    LocationHistoryResponse:
      type: array
      items:
        $ref: "#/components/schemas/LocationHistoryEntry"
      x-field-extra-annotation: "@lombok.Builder.Default"
    SparseLocationHistoryEntry:
      type: object
      required:
        - longitude
        - latitude
      properties:
        longitude:
          type: number
          format: double
          description: The longitude of the location history entry
          example: 103.8470393
        latitude:
          type: number
          format: double
          description: The latitude of the location history entry
          example: 1.2842441
    LocationHistoryEntry:
      allOf:
        - $ref: '#/components/schemas/SparseLocationHistoryEntry'
        - type: object
          required:
            - id
            - timestamp
          properties:
            id:
              type: number
              description: The unique identifier of the location history entry
              example: 42
            timestamp:
              type: string
              format: date-time
              description: The timestamp of the location history entry
              example: 2024-01-01T00:15:10.145Z
            horizontalAccuracy:
              type: number
              description: Approximate accuracy radius of the location measurement, in meters. A lower value means better precision.
              example: 20
            verticalAccuracy:
              type: number
              description: Approximate accuracy of the altitude measurement, in meters. A lower value means better precision.
              example: 5
            altitude:
              type: number
              description: Altitude above the WGS84 reference ellipsoid, in meters.
              example: 150
            heading:
              type: number
              description: Heading in degrees east of true north, from 0 to 359.
              example: 90
            velocity:
              type: number
              description: Measured velocity (ground speed) in meters per second.
              example: 5
            source:
              type: string
              enum:
                - GOOGLE_IMPORT
                - THEREABOUT_API
                - THEREABOUT_API_UPDATE
              description: The source of the location measurement
              example: GOOGLE_IMPORT
            estimatedIsoCountryCode:
              type: string
              description: The estimated ISO 3166-1 alpha-2 country code of the location.
              example: CH
            note:
              type: string
              description: A note about the location history entry
              example: "A good spot for a barbecue."
    GeoJsonLocation:
      type: object
      properties:
        type:
          type: string
          enum: [Feature]
        geometry:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              example: [-122.030581, 37.331800]
        properties:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
              example: "2015-10-01T08:00:00-0700"
            altitude:
              type: number
              example: 0
            speed:
              type: number
              example: 4
            course:
              type: number
              example: 90
            horizontal_accuracy:
              type: number
              example: 30
            vertical_accuracy:
              type: number
              example: -1
            speed_accuracy:
              type: number
              example: -1
            course_accuracy:
              type: number
              example: -1
            motion:
              type: array
              items:
                type: string
                enum: [driving, walking, running, cycling, stationary]
              example: ["driving", "stationary"]
            battery_state:
              type: string
              enum: [unknown, charging, full, unplugged]
              example: "charging"
            battery_level:
              type: number
              format: float
              example: 0.80
            wifi:
              type: string
              example: ""
            device_id:
              type: string
              example: ""
            unique_id:
              type: string
              example: ""
            pauses:
              type: boolean
              example: false
            activity:
              type: string
              enum: [automotive_navigation, fitness, other_navigation, other]
              example: "other_navigation"
            desired_accuracy:
              type: number
              example: 100
            deferred:
              type: number
              example: 1000
            significant_change:
              type: string
              enum: [disabled, enabled, exclusive]
              example: "disabled"
            locations_in_payload:
              type: number
              example: 1

    ThereaboutBaseErrorModel:
      type: object
      required:
        - requestId
        - errorMessageParameters
        - errorMessageTranslationKey
        - extraInformation
      properties:
        requestId:
          type: string
        errorMessageTranslationKey:
          type: string
        errorMessageParameters:
          type: array
          items:
            type: string
          x-field-extra-annotation: "@lombok.Builder.Default"
        extraInformation:
          type: string
        stacktrace:
          type: string
    FrontendConfigurationResponse:
      type: object
      required:
        - googleMapsApiKey
      properties:
        googleMapsApiKey:
          type: string
          example: TEST_KEY_ASJHKASHDASJDDSA
        thereaboutApiKey:
          type: string
          example: UUID-2342-4556345
        versionDetails:
          $ref: "#/components/schemas/VersionDetails"
    VersionDetails:
        type: object
        required:
            - version
            - commitTime
            - commitRef
            - branch
        properties:
          version:
            type: string
            example: "1.0.0"
          commitTime:
            type: string
            format: date-time
            example: "2024-01-01T00:15:10.145Z"
          commitRef:
            type: string
            example: "4faee41"
          branch:
            type: string
            example: "main"

  responses:
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThereaboutBaseErrorModel"
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThereaboutBaseErrorModel"
    409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThereaboutBaseErrorModel"
    500:
      description: Generic Internal Server Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThereaboutBaseErrorModel"
    502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ThereaboutBaseErrorModel"
